#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('viber-feedback-bot:server');
const https = require('https');
const fs = require('fs');
const fetch = require('node-fetch');
const { Sequelize, DataTypes  } = require('sequelize');

require('dotenv').config();

const ViberBot = require('viber-bot').Bot;
const BotEvents = require('viber-bot').Events;
const TextMessage = require('viber-bot').Message.Text;

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: './database.sqlite'
});

const StartedConversation = sequelize.define('StartedConversation', {
  // Model attributes are defined here
  viberUserName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  viberUserId: {
    type: DataTypes.STRING,
    allowNull: false
  },
  created_at: {
    type: DataTypes.STRING,
    allowNull: false
  },
}, {
  // Other model options go here
});

// StartedConversation.sync();

const bot = new ViberBot({
  authToken: process.env.TOKEN,
  name: "Книга жалоб и предложений",
  avatar: "http://viber.com/avatar.jpg" // It is recommended to be 720x720, and no more than 100kb.
});

// bot.onConversationStarted(async(userProfile, isSubscribed, context, onFinish) => {
//   console.log('----------------------------------------------------------------');
//   console.log(`${new Date().toLocaleString('ru')} New conversation started with ${userProfile.id} ${userProfile.name} ${isSubscribed}`);
//
//   if(!isSubscribed) {
//
//     const isHadWelcome = !! await StartedConversation.findOne({ where: { viberUserId: userProfile.id } });
//
//     if(!isHadWelcome) {
//       console.log(`${new Date().toLocaleString('ru')} First welcome ${userProfile.id} ${userProfile.name}`);
//       await onFinish(new TextMessage(`Привет, ${userProfile.name}.\n\rЭто бот жалоб и предложений компании "Инари".\n\rЗдесь ты можешь писать претензии и предложения, которые касаются твоей работы в компании от непосредственно рабочих моментов до жизнедеятельности компании в целом.\n\rКаждому сообщению будет присвоен номер. Эту информацию будет рассматривать руководство компании. Желательно в сообщении уточнить от кого оно, так как будет виден только твой ник, и описывать всё как можно подробнее.\n\rУлучшим компанию вместе!`));
//       const conversation = await StartedConversation.create({ viberUserId: userProfile.id, viberUserName: userProfile.name, created_at: new Date().toISOString() });
//       console.log(`${new Date().toLocaleString('ru')} Started conversation saved on local db: `, conversation);
//     } else {
//       console.log(`${new Date().toLocaleString('ru')} Already had welcome ${userProfile.id} ${userProfile.name}`);
//     }
//
//   }
// });

bot.on(BotEvents.MESSAGE_RECEIVED, async(message, response) => {

  console.log('----------------------------------------------------------------');
  console.log(`${new Date().toLocaleString('ru')} New message: `, ('text' in message) ? message.text : message);
  console.log('From: ', response.userProfile.id, );
  console.log('Name: ', response.userProfile.name);

  if(!('text' in message) || !message.text) {
    response.send(new TextMessage(`Допустимы только текстовые сообщения`));
    bot.sendMessage({id: process.env.ADMIN_ID}, new TextMessage(`New message without text from user: ${response.userProfile.id} ${response.userProfile.name}: ${ JSON.stringify(message) }`));
    return;
  }

  bot.sendMessage({id: process.env.ADMIN_ID}, new TextMessage(`New message from user: ${response.userProfile.id} ${response.userProfile.name}: ${message.text}`));

  if(!message.text.trim().length) {
    response.send(new TextMessage(`Пустое сообщение недопустимо`));
    return;
  }

  bot.sendMessage({id: process.env.DISPATCHER_ID}, new TextMessage(`${response.userProfile.name}: ${message.text}`));

  const savingUserRequestResult = await sendMessageData(message.text, response.userProfile.id, response.userProfile.name);

  console.log(`${new Date().toLocaleString('ru')} savingUserRequestResult: `, savingUserRequestResult);

  if('errorText' in savingUserRequestResult) {
    response.send(new TextMessage(savingUserRequestResult.errorText));
    bot.sendMessage({id: process.env.ADMIN_ID}, new TextMessage(`Saving error: ${response.userProfile.id} ${response.userProfile.name}: ${message.text}: ${savingUserRequestResult.errorText}`));
  } else {
    response.send(new TextMessage(`Ваше сообщение принято под номером ${savingUserRequestResult.requestNumber}`));
  }

  const isHadWelcome = !! await StartedConversation.findOne({ where: { viberUserId: response.userProfile.id } });

  if(!isHadWelcome) {
    console.log(`${new Date().toLocaleString('ru')} First welcome ${response.userProfile.id} ${response.userProfile.name}`);
    bot.sendMessage({id: response.userProfile.id}, new TextMessage(`Привет, ${response.userProfile.name}.\n\rЭто бот жалоб и предложений компании "Инари".\n\rЗдесь ты можешь писать претензии и предложения, которые касаются твоей работы в компании от непосредственно рабочих моментов до жизнедеятельности компании в целом.\n\rКаждому сообщению будет присвоен номер. Эту информацию будет рассматривать руководство компании. Желательно в сообщении уточнить от кого оно, так как будет виден только твой ник, и описывать всё как можно подробнее.\n\rУлучшим компанию вместе!`));
    const conversation = await StartedConversation.create({ viberUserId: response.userProfile.id, viberUserName: response.userProfile.name, created_at: new Date().toISOString() });
    console.log(`${new Date().toLocaleString('ru')} Started conversation saved on local db: `, conversation);
  } else {
    console.log(`${new Date().toLocaleString('ru')} Already had welcome ${response.userProfile.id} ${response.userProfile.name}`);
  }

});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4002');
app.set('port', port);

/**
 * Create HTTP server.
 */

const keyPathStr = `${process.env.SSL_KEY_PATH_FILE}`;
const certPathStr = `${process.env.SSL_CERT_PATH_FILE}`;
const caPathStr = `${process.env.SSL_CA_PATH_FILE}`;
// console.log("SSL options: ", keyPathStr, certPathStr, caPathStr);
const serverSSLOptions = {
  key: fs.readFileSync(keyPathStr),
  cert: fs.readFileSync(certPathStr),
  ca: fs.readFileSync(caPathStr),
};

const server = https.createServer(serverSSLOptions, bot.middleware()).listen(port, () => bot.setWebhook(`${process.env.PUBLIC_URL}:${port}`));
console.log(`${new Date().toLocaleString('ru')} Server created: `, server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const sendMessageData = async(text, viberUserId, viberUserName) => {

  const url = `${process.env.SERVER_ADDR}addFeedbackMessage`;

  try {
    return await fetch(url, {
      method: 'POST', // *GET, POST, PUT, DELETE, etc.
      mode: 'cors', // no-cors, *cors, same-origin
      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
      credentials: 'same-origin', // include, *same-origin, omit
      redirect: 'follow', // manual, *follow, error
      referrerPolicy: 'no-referrer', // no-referrer, *client
      body: JSON.stringify({text, viberUserId, viberUserName, st: process.env.SECRET}),
      headers: {
        'Content-Type': 'application/json',
        // 'Authorization': `Bearer ${process.env.SERVER_ADDR}`
      }})
        .then((response) => {
          console.log(`${new Date().toLocaleString('ru')} Sending message data response: `, response);
          return response.json();
        })
        .then((data) => {
          console.log(`${new Date().toLocaleString('ru')} Sending message response data: `, data);
          return {requestNumber: data.id};
        });
  } catch (e) {
    console.error(`${new Date().toLocaleString('ru')} sendMessageData error: `, e);
    return {errorText: 'Что-то пошло не так, но мы работаем над этим. Ваше сообщение пока не принято, попробуйте позже.'};
  }
};
